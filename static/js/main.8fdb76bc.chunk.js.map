{"version":3,"sources":["components/styles/StyledCell.tsx","tetrominos.tsx","components/Cell.tsx","components/Stage.tsx","gameHelper.tsx","hooks/usePlayer.tsx","hooks/useStage.tsx","components/Tetris.tsx","hooks/useInterval.tsx","hooks/useGameStatus.tsx","App.tsx","index.tsx"],"names":["StyledCell","styled","div","props","color","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","length","Cell","blocktype","Stage","stage","className","map","row","cell","createStage","Array","i","fill","checkCollision","player","moveX","moveY","y","tetromino","x","pos","usePlayer","useState","collided","setPlayer","prev","STAGE_WIDTH","matrix","clonedPlayer","JSON","parse","stringify","_","index","column","console","log","reverse","useStage","resetPlayer","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","j","reduce","ack","findIndex","unshift","push","sweepRows","Tetris","callback","delay","gameOver","setGameOver","dropTime","setDropTime","updatePlayerPos","playerRotate","score","setScore","useGameStatus","movePlayer","dir","dropPlayer","id","setInterval","clearInterval","role","tabIndex","onKeyDown","e","keyCode","move","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fdb76bc.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n\r\n  background: rgba(${props => props.color});\r\n  border: 0.5px solid #242121;\r\n \r\n`;\r\n","interface ITETROMINO {\r\n  shape: (string|number)[][];\r\n  color: string;\r\n}\r\n\r\ninterface ITETROMINOS {\r\n  [key:string]: ITETROMINO\r\n}\r\n\r\n\r\nexport const TETROMINOS :ITETROMINOS= {\r\n  0: { shape: [[0]], color: '0, 0, 0' },\r\n  I: {\r\n    shape: [\r\n      [0, 'I', 0, 0], \r\n      [0, 'I', 0, 0], \r\n      [0, 'I', 0, 0], \r\n      [0, 'I', 0, 0]\r\n    ],\r\n      color:'80,227,230',\r\n  },\r\n  J: { \r\n    shape: [\r\n    [0, 'J', 0], \r\n    [0, 'J', 0], \r\n    ['J', 'J', 0]\r\n  ], \r\n  color:'36,95,223',\r\n },\r\n  L: {\r\n    shape: \r\n    [\r\n      [0, 'L', 0], \r\n      [0, 'L', 0],\r\n      [0, 'L', 'L']\r\n    ],\r\n    color:'223,173,36',\r\n  },\r\n  O: { \r\n    shape: [\r\n    ['O', 'O'], \r\n    ['O', 'O']\r\n  ],\r\n  color:'173,120,230',\r\n   },\r\n  S: { \r\n    shape: [\r\n      [0, 'S', 'S'], \r\n      ['S', 'S', 0], \r\n      [0, 0, 0]\r\n    ], \r\n    color:'48,211,56',\r\n   },\r\n  T: {\r\n    shape: [\r\n      [0, 0, 0], \r\n      ['T', 'T', 'T'], \r\n      [0, 'T', 0]\r\n    ],\r\n    color:'132,61,198',\r\n  },\r\n  Z: { \r\n    shape: [\r\n      ['Z', 'Z', 0], \r\n      [0, 'Z', 'Z'], \r\n      [0, 0, 0]\r\n    ], \r\n    color:'81,173,230',\r\n  },\r\n};\r\n\r\nexport const randomTetromino=()=>{\r\n  const tetrominos='IJLOSTZ'\r\n  const randTetromino=tetrominos[Math.floor(Math.random()*tetrominos.length)];\r\n  return TETROMINOS[randTetromino]\r\n}","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell'\r\nimport { TETROMINOS } from '../tetrominos'\r\n\r\ninterface CellProps {\r\n  blocktype: string|number\r\n};\r\n\r\nconst Cell = ({ blocktype }: CellProps) => (\r\n  <StyledCell color={TETROMINOS[blocktype].color} />\r\n);\r\nexport default Cell;","import React from 'react';\r\nimport './styles.css';\r\n\r\nimport Cell from './Cell';\r\ninterface StageProps {\r\n    stage: Array<Array<Array<string | number>>>\r\n  };\r\n\r\nconst Stage = ( {stage}:StageProps) => (\r\n    <div className= \"StyledStage\">\r\n        {stage.map(row => row.map((cell) => <Cell blocktype={cell[0]} />))}\r\n    </div>\r\n);\r\nexport default Stage;","export const STAGE_WIDTH: number = 12;\r\nexport const STAGE_HEIGHT: number = 20;\r\n\r\n\r\n\r\ninterface point {\r\n    x: number\r\n    y: number\r\n}\r\n\r\ninterface IPlayer {\r\n    pos: point\r\n    tetromino: (string | number)[][],\r\n    collided: boolean,\r\n}\r\n\r\n\r\nexport const createStage = ():Array<Array<Array<string | number>>>=> {\r\nvar stage:Array<Array<Array<string | number>>>= new Array(STAGE_HEIGHT);\r\n    for (var i = 0; i < stage.length; i++) {\r\n        stage[i] = new Array(STAGE_WIDTH).fill([0, 'clear'])\r\n    }\r\n    return stage\r\n\r\n}\r\n\r\nexport const checkCollision = (player:IPlayer, stage:Array<Array<Array<string | number>>>,moveX:number,moveY:number ) => {\r\n    for (let y = 0; y < player.tetromino.length; y += 1) {\r\n      for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n        if (player.tetromino[y][x] !== 0) {\r\n          if (!stage[y + player.pos.y + moveY] ||\r\n            !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n            stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !=='clear') {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  };\r\n","import { useState } from 'react'\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos'\r\nimport { STAGE_WIDTH } from '../gameHelper'\r\nimport { checkCollision } from '../gameHelper';\r\n\r\n\r\n\r\ninterface point {\r\n    x: number\r\n    y: number\r\n}\r\n\r\ninterface IPlayer {\r\n    pos: point\r\n    tetromino: (string | number)[][],\r\n    collided: boolean,\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState<IPlayer>({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const updatePlayerPos = (x: number, y: number, collided: boolean) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }))\r\n\r\n    }\r\n\r\n    const resetPlayer = () => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false,\r\n        })\r\n    }\r\n\r\n\r\n    const rotate = (matrix: Array<Array<string | number>>) => {\r\n        const mtrx = matrix.map((_, index) => matrix.map(column => {\r\n            console.log(column[index])\r\n            return column[index]\r\n        }));\r\n        return mtrx.map(row => row.reverse());\r\n\r\n    }\r\n\r\n    const playerRotate = (stage: Array<Array<Array<string | number>>>) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino);\r\n\r\n        if (checkCollision(clonedPlayer, stage, 0, 0))\r\n            return;\r\n        setPlayer(clonedPlayer);\r\n    }\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n\r\n\r\n}","import { useState, useEffect } from 'react'\nimport { createStage } from '../gameHelper';\ninterface point {\nx: number\ny: number\n}\n\ninterface IPlayer {\npos: point\ntetromino: (string | number)[][],\ncollided: boolean,\n}\n\ntype Function = () => void;\nexport const useStage = (player:IPlayer,resetPlayer:Function)=> {\n    const [stage, setStage] = useState<Array<Array<Array<string | number>>>>(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n        const sweepRows = (newStage:Array<Array<Array<string | number>>>) =>\n        newStage.reduce((ack:Array<Array<Array<string | number>>>, row) => {\n         \n          if (row.findIndex(cell => cell[0] === 0) === -1) {\n            setRowsCleared(prev => prev + 1);\n            ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n            return ack;\n          }\n          ack.push(row);\n          return ack;\n        }, [])\n\n\n        const updateStage = (prevStage:Array<Array<Array<string | number>>>) => {\n\n            const newStage = prevStage.map(row =>\n                row.map(cell =>(cell[1] === 'clear' ? [0, 'clear'] : cell)));\n\n                for(var i=0;i<player.tetromino.length;i++)\n                {\n                    for(var j=0;j<player.tetromino[0].length;j++)\n                    {\n                        if(player.tetromino[i][j]!==0)\n                        {\n                            newStage[i+player.pos.y][j+player.pos.x]=[\n                                player.tetromino[i][j],\n                                `${player.collided?'merged':'clear' }`\n                            ]\n                        }\n                    }\n                }\n\n                if(player.collided)\n                {\n                    resetPlayer();\n                    return sweepRows(newStage);\n                }\n\n                return newStage;\n\n        }\n        setStage(prev => updateStage(prev))\n    }, [player])\n   \n     return [stage, setStage,rowsCleared];\n\n}","import React, { useState, KeyboardEvent } from 'react';\r\nimport Stage from './Stage';\r\nimport './styles.css';\r\n\r\nimport { createStage, checkCollision } from '../gameHelper';\r\n\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\nimport { useInterval } from '../hooks/useInterval';\r\n\r\n\r\nconst Tetris = () => {\r\n  const [gameOver, setGameOver] = useState<boolean>(false)\r\n  const [dropTime, setDropTime] = useState<number>(0);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate]: Array<any> = usePlayer();\r\n  const [stage, setStage, rowsCleared]: Array<any> = useStage(player, resetPlayer);\r\n  const [score, setScore] = useGameStatus(rowsCleared);\r\n  const movePlayer = (dir: number) => {\r\n    if (!checkCollision(player, stage, dir, 0)) {\r\n      updatePlayerPos(dir, 0)\r\n    }\r\n\r\n  }\r\n  const startGame = () => {\r\n    setStage(createStage())\r\n    setDropTime(1000);\r\n    resetPlayer()\r\n    setGameOver(false)\r\n\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n\r\n    if (!checkCollision(player, stage, 0, 1)) {\r\n      updatePlayerPos(0, 1, false)\r\n    }\r\n    else {\r\n      if (player.pos.y < 1) {\r\n        setDropTime(0);\r\n        setGameOver(true)\r\n\r\n      }\r\n      updatePlayerPos(0, 0, true)\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  const move = (e: KeyboardEvent) => {\r\n    if (!gameOver) {\r\n\r\n      if (e.keyCode === 37)\r\n        movePlayer(-1);\r\n      else if (e.keyCode === 39)\r\n        movePlayer(1);\r\n      else if (e.keyCode === 40)\r\n        dropPlayer();\r\n      else if (e.keyCode === 38) {\r\n        playerRotate(stage);\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n\r\n  useInterval(() => {\r\n    dropPlayer();\r\n  }, dropTime);\r\n\r\n\r\n  return (\r\n    < div className=\"StyledTetris\" role=\"button\" tabIndex={0} onKeyDown={(e: KeyboardEvent) => move(e)}>\r\n      <div className=\"header\">TETRIS</div>\r\n\r\n      <div className=\"left\"> <Stage stage={stage} /></div>\r\n      <div className=\"right\">\r\n        <button onClick={startGame}>Start</button>\r\n        <br /> <br />\r\n        Score: {score}\r\n        <br />\r\n        {gameOver ? \"GAMEOVER😞\" : \"\"}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Tetris;","import { useEffect } from 'react';\r\ntype Function = () => void;\r\n\r\nexport function useInterval(callback: Function, delay: number) {\r\n    useEffect(() => {\r\n        if (delay === 0) {\r\n            return\r\n            \r\n        }\r\n        const id = setInterval(callback, delay);\r\n        return () => {\r\n            // console.log(\"clearinterval\")\r\n            clearInterval(id);\r\n        };\r\n    });\r\n}\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useGameStatus = (rowsCleared:number) => {\r\n  const [score, setScore] = useState<number>(0);\r\n  \r\n\r\n  useEffect(() => {\r\n    setScore(prev => prev + rowsCleared);\r\n  }, [rowsCleared]);\r\n\r\n  return [score, setScore];\r\n};\r\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App= (): JSX.Element => {\r\n  return (\r\n    <div className=\"App\">\r\n    <Tetris/>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}