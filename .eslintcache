[{"E:\\New folder\\tetris-typescript\\src\\index.tsx":"1","E:\\New folder\\tetris-typescript\\src\\App.tsx":"2","E:\\New folder\\tetris-typescript\\src\\components\\Tetris.tsx":"3","E:\\New folder\\tetris-typescript\\src\\components\\Stage.tsx":"4","E:\\New folder\\tetris-typescript\\src\\gameHelper.tsx":"5","E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledTetris.tsx":"6","E:\\New folder\\tetris-typescript\\src\\hooks\\usePlayer.tsx":"7","E:\\New folder\\tetris-typescript\\src\\hooks\\useStage.tsx":"8","E:\\New folder\\tetris-typescript\\src\\hooks\\useGameStatus.tsx":"9","E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledStage.tsx":"10","E:\\New folder\\tetris-typescript\\src\\components\\Cell.tsx":"11","E:\\New folder\\tetris-typescript\\src\\tetrominos.tsx":"12","E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledCell.tsx":"13","D:\\react-tetris\\tetris-typescript\\src\\index.tsx":"14","D:\\react-tetris\\tetris-typescript\\src\\App.tsx":"15","D:\\react-tetris\\tetris-typescript\\src\\components\\Tetris.tsx":"16","D:\\react-tetris\\tetris-typescript\\src\\components\\Stage.tsx":"17","D:\\react-tetris\\tetris-typescript\\src\\gameHelper.tsx":"18","D:\\react-tetris\\tetris-typescript\\src\\hooks\\useStage.tsx":"19","D:\\react-tetris\\tetris-typescript\\src\\hooks\\useGameStatus.tsx":"20","D:\\react-tetris\\tetris-typescript\\src\\hooks\\usePlayer.tsx":"21","D:\\react-tetris\\tetris-typescript\\src\\components\\Cell.tsx":"22","D:\\react-tetris\\tetris-typescript\\src\\tetrominos.tsx":"23","D:\\react-tetris\\tetris-typescript\\src\\components\\styles\\StyledCell.tsx":"24","D:\\react-tetris\\tetris-typescript\\src\\hooks\\useInterval.tsx":"25"},{"size":222,"mtime":1611316488246,"results":"26","hashOfConfig":"27"},{"size":202,"mtime":1611316488230,"results":"28","hashOfConfig":"27"},{"size":2207,"mtime":1611316488230,"results":"29","hashOfConfig":"27"},{"size":372,"mtime":1611316488230,"results":"30","hashOfConfig":"27"},{"size":1132,"mtime":1611316488230,"results":"31","hashOfConfig":"27"},{"size":355,"mtime":1611316488230,"results":"32","hashOfConfig":"27"},{"size":1499,"mtime":1611336232458,"results":"33","hashOfConfig":"27"},{"size":2084,"mtime":1611327641273,"results":"34","hashOfConfig":"27"},{"size":281,"mtime":1611316488230,"results":"35","hashOfConfig":"27"},{"size":255,"mtime":1611316488230,"results":"36","hashOfConfig":"27"},{"size":305,"mtime":1611316488230,"results":"37","hashOfConfig":"27"},{"size":1280,"mtime":1611316488246,"results":"38","hashOfConfig":"27"},{"size":151,"mtime":1611316488230,"results":"39","hashOfConfig":"27"},{"size":222,"mtime":1611588261993,"results":"40","hashOfConfig":"41"},{"size":202,"mtime":1611588261841,"results":"42","hashOfConfig":"41"},{"size":2174,"mtime":1611669758843,"results":"43","hashOfConfig":"41"},{"size":355,"mtime":1611667654959,"results":"44","hashOfConfig":"41"},{"size":1132,"mtime":1611588261849,"results":"45","hashOfConfig":"41"},{"size":2018,"mtime":1611664842489,"results":"46","hashOfConfig":"41"},{"size":281,"mtime":1611588261849,"results":"47","hashOfConfig":"41"},{"size":1682,"mtime":1611724237324,"results":"48","hashOfConfig":"41"},{"size":305,"mtime":1611669758001,"results":"49","hashOfConfig":"41"},{"size":1280,"mtime":1611588262002,"results":"50","hashOfConfig":"41"},{"size":169,"mtime":1611667865383,"results":"51","hashOfConfig":"41"},{"size":404,"mtime":1611664839565,"results":"52","hashOfConfig":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},"1fe9vm6",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"85"},"f6i03z",{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"85"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"85"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"E:\\New folder\\tetris-typescript\\src\\index.tsx",["110"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n",["111","112"],"E:\\New folder\\tetris-typescript\\src\\App.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\Tetris.tsx",["113"],"import React, { useState,KeyboardEvent } from 'react';\r\nimport Stage from './Stage';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\nimport { createStage, checkCollision } from '../gameHelper';\r\n\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\nconst Tetris = () => {\r\n    const [gameOver, setGameOver] = useState<boolean>(false)\r\n\r\n    const [player, updatePlayerPos, resetPlayer,playerRotate]:Array<any> = usePlayer();\r\n    const [stage, setStage, rowsCleared]:Array<any> = useStage(player, resetPlayer);\r\n    const [score, setScore] = useGameStatus(rowsCleared);\r\n    const movePlayer = (dir:number) => {\r\n        if (!checkCollision(player, stage, dir,0)) {\r\n            updatePlayerPos( dir,0 )\r\n        }\r\n\r\n    }\r\n    const startGame = () => {\r\n        setStage(createStage())\r\n        resetPlayer()\r\n        setGameOver(false)\r\n\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n\r\n        if (!checkCollision(player, stage, 0, 1 )) {\r\n            updatePlayerPos( 0, 1, false )\r\n        }\r\n        else {\r\n            if (player.pos.y < 1) {\r\n                setGameOver(true)\r\n                \r\n            }\r\n            updatePlayerPos(0,0,true )\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n      const move = (e: KeyboardEvent) => {\r\n        if (!gameOver) {\r\n    \r\n          if (e.keyCode === 37)\r\n            movePlayer(-1);\r\n          else if (e.keyCode === 39)\r\n            movePlayer(1);\r\n          else if (e.keyCode === 40)\r\n            dropPlayer();\r\n          else if (e.keyCode === 38) {\r\n            playerRotate(stage);\r\n          }\r\n    \r\n    \r\n        }\r\n      }    \r\n\r\n    return (\r\n      <StyledTetrisWrapper role=\"button\" tabIndex={0} onKeyDown={(e: KeyboardEvent) => move(e)}>\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                &nbsp;&nbsp; <button onClick={startGame}>Start</button>\r\n                <br />\r\n                &nbsp;&nbsp;Score: {score}\r\n                <br />\r\n                &nbsp;&nbsp;{gameOver ? \"GAMEOVER\" : \"\"}\r\n\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n\r\n    )\r\n}\r\nexport default Tetris;","E:\\New folder\\tetris-typescript\\src\\components\\Stage.tsx",[],"E:\\New folder\\tetris-typescript\\src\\gameHelper.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledTetris.tsx",[],"E:\\New folder\\tetris-typescript\\src\\hooks\\usePlayer.tsx",[],"E:\\New folder\\tetris-typescript\\src\\hooks\\useStage.tsx",["114"],"import { useState, useEffect } from 'react'\r\nimport { createStage } from '../gameHelper';\r\ninterface point {\r\nx: number\r\ny: number\r\n}\r\n\r\ninterface IPlayer {\r\npos: point\r\ntetromino: (string | number)[][],\r\ncollided: boolean,\r\n}\r\n\r\ntype Function = () => void;\r\nexport const useStage = (player:IPlayer,resetPlayer:Function)=> {\r\n    const [stage, setStage] = useState<Array<Array<Array<string | number>>>>(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n        const sweepRows = (newStage:Array<Array<Array<string | number>>>) =>\r\n        newStage.reduce((ack:Array<Array<Array<string | number>>>, row) => {\r\n         \r\n          if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n            setRowsCleared(prev => prev + 1);\r\n            ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n            return ack;\r\n          }\r\n          ack.push(row);\r\n          return ack;\r\n        }, [])\r\n\r\n\r\n        const updateStage = (prevStage:Array<Array<Array<string | number>>>) => {\r\n\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell =>(cell[1] === 'clear' ? [0, 'clear'] : cell)));\r\n\r\n                for(var i=0;i<player.tetromino.length;i++)\r\n                {\r\n                    for(var j=0;j<player.tetromino[0].length;j++)\r\n                    {\r\n                        if(player.tetromino[i][j]!==0)\r\n                        {\r\n                            newStage[i+player.pos.y][j+player.pos.x]=[\r\n                                player.tetromino[i][j],\r\n                                `${player.collided?'merged':'clear' }`\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(player.collided)\r\n                {\r\n                    resetPlayer();\r\n                    return sweepRows(newStage);\r\n                }\r\n\r\n                return newStage;\r\n\r\n        }\r\n        setStage(prev => updateStage(prev))\r\n    }, [player])\r\n   \r\n     return [stage, setStage,rowsCleared];\r\n\r\n}","E:\\New folder\\tetris-typescript\\src\\hooks\\useGameStatus.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledStage.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\Cell.tsx",[],"E:\\New folder\\tetris-typescript\\src\\tetrominos.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledCell.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\index.tsx",["115"],["116","117"],"D:\\react-tetris\\tetris-typescript\\src\\App.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\components\\Tetris.tsx",["118"],"import React, { useState, KeyboardEvent } from 'react';\r\nimport Stage from './Stage';\r\nimport './styles.css';\r\n\r\nimport { createStage, checkCollision } from '../gameHelper';\r\n\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\nimport { useInterval } from '../hooks/useInterval';\r\n\r\n\r\nconst Tetris = () => {\r\n  const [gameOver, setGameOver] = useState<boolean>(false)\r\n  const [dropTime, setDropTime] = useState<number>(0);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate]: Array<any> = usePlayer();\r\n  const [stage, setStage, rowsCleared]: Array<any> = useStage(player, resetPlayer);\r\n  const [score, setScore] = useGameStatus(rowsCleared);\r\n  const movePlayer = (dir: number) => {\r\n    if (!checkCollision(player, stage, dir, 0)) {\r\n      updatePlayerPos(dir, 0)\r\n    }\r\n\r\n  }\r\n  const startGame = () => {\r\n    setStage(createStage())\r\n    setDropTime(1000);\r\n    resetPlayer()\r\n    setGameOver(false)\r\n\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n\r\n    if (!checkCollision(player, stage, 0, 1)) {\r\n      updatePlayerPos(0, 1, false)\r\n    }\r\n    else {\r\n      if (player.pos.y < 1) {\r\n        setDropTime(0);\r\n        setGameOver(true)\r\n\r\n      }\r\n      updatePlayerPos(0, 0, true)\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  const move = (e: KeyboardEvent) => {\r\n    if (!gameOver) {\r\n\r\n      if (e.keyCode === 37)\r\n        movePlayer(-1);\r\n      else if (e.keyCode === 39)\r\n        movePlayer(1);\r\n      else if (e.keyCode === 40)\r\n        dropPlayer();\r\n      else if (e.keyCode === 38) {\r\n        playerRotate(stage);\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n\r\n  useInterval(() => {\r\n    dropPlayer();\r\n  }, dropTime);\r\n\r\n\r\n  return (\r\n    < div className=\"StyledTetris\" role=\"button\" tabIndex={0} onKeyDown={(e: KeyboardEvent) => move(e)}>\r\n      <div className=\"header\">TETRIS</div>\r\n\r\n      <div className=\"left\"> <Stage stage={stage} /></div>\r\n      <div className=\"right\">\r\n        <button onClick={startGame}>Start</button>\r\n        <br /> <br />\r\n        Score: {score}\r\n        <br />\r\n        {gameOver ? \"GAMEOVER😞\" : \"\"}\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Tetris;","D:\\react-tetris\\tetris-typescript\\src\\components\\Stage.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\gameHelper.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\hooks\\useStage.tsx",["119"],"import { useState, useEffect } from 'react'\nimport { createStage } from '../gameHelper';\ninterface point {\nx: number\ny: number\n}\n\ninterface IPlayer {\npos: point\ntetromino: (string | number)[][],\ncollided: boolean,\n}\n\ntype Function = () => void;\nexport const useStage = (player:IPlayer,resetPlayer:Function)=> {\n    const [stage, setStage] = useState<Array<Array<Array<string | number>>>>(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n        const sweepRows = (newStage:Array<Array<Array<string | number>>>) =>\n        newStage.reduce((ack:Array<Array<Array<string | number>>>, row) => {\n         \n          if (row.findIndex(cell => cell[0] === 0) === -1) {\n            setRowsCleared(prev => prev + 1);\n            ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n            return ack;\n          }\n          ack.push(row);\n          return ack;\n        }, [])\n\n\n        const updateStage = (prevStage:Array<Array<Array<string | number>>>) => {\n\n            const newStage = prevStage.map(row =>\n                row.map(cell =>(cell[1] === 'clear' ? [0, 'clear'] : cell)));\n\n                for(var i=0;i<player.tetromino.length;i++)\n                {\n                    for(var j=0;j<player.tetromino[0].length;j++)\n                    {\n                        if(player.tetromino[i][j]!==0)\n                        {\n                            newStage[i+player.pos.y][j+player.pos.x]=[\n                                player.tetromino[i][j],\n                                `${player.collided?'merged':'clear' }`\n                            ]\n                        }\n                    }\n                }\n\n                if(player.collided)\n                {\n                    resetPlayer();\n                    return sweepRows(newStage);\n                }\n\n                return newStage;\n\n        }\n        setStage(prev => updateStage(prev))\n    }, [player])\n   \n     return [stage, setStage,rowsCleared];\n\n}","D:\\react-tetris\\tetris-typescript\\src\\hooks\\useGameStatus.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\hooks\\usePlayer.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\components\\Cell.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\tetrominos.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\components\\styles\\StyledCell.tsx",[],"D:\\react-tetris\\tetris-typescript\\src\\hooks\\useInterval.tsx",[],{"ruleId":"120","severity":1,"message":"121","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":23},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"120","severity":1,"message":"128","line":15,"column":19,"nodeType":"122","messageId":"123","endLine":15,"endColumn":27},{"ruleId":"129","severity":1,"message":"130","line":63,"column":8,"nodeType":"131","endLine":63,"endColumn":16,"suggestions":"132"},{"ruleId":"120","severity":1,"message":"121","line":5,"column":8,"nodeType":"122","messageId":"123","endLine":5,"endColumn":23},{"ruleId":"124","replacedBy":"133"},{"ruleId":"126","replacedBy":"134"},{"ruleId":"120","severity":1,"message":"128","line":19,"column":17,"nodeType":"122","messageId":"123","endLine":19,"endColumn":25},{"ruleId":"129","severity":1,"message":"130","line":63,"column":8,"nodeType":"131","endLine":63,"endColumn":16,"suggestions":"135"},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["136"],"no-negated-in-lhs",["137"],"'setScore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetPlayer'. Either include it or remove the dependency array. If 'resetPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["138"],["136"],["137"],["139"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"140","fix":"142"},"Update the dependencies array to be: [player, resetPlayer]",{"range":"143","text":"144"},{"range":"145","text":"144"},[2021,2029],"[player, resetPlayer]",[1959,1967]]