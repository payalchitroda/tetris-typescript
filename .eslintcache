[{"E:\\New folder\\tetris-typescript\\src\\index.tsx":"1","E:\\New folder\\tetris-typescript\\src\\App.tsx":"2","E:\\New folder\\tetris-typescript\\src\\components\\Tetris.tsx":"3","E:\\New folder\\tetris-typescript\\src\\components\\Stage.tsx":"4","E:\\New folder\\tetris-typescript\\src\\gameHelper.tsx":"5","E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledTetris.tsx":"6","E:\\New folder\\tetris-typescript\\src\\hooks\\usePlayer.tsx":"7","E:\\New folder\\tetris-typescript\\src\\hooks\\useStage.tsx":"8","E:\\New folder\\tetris-typescript\\src\\hooks\\useGameStatus.tsx":"9","E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledStage.tsx":"10","E:\\New folder\\tetris-typescript\\src\\components\\Cell.tsx":"11","E:\\New folder\\tetris-typescript\\src\\tetrominos.tsx":"12","E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledCell.tsx":"13"},{"size":222,"mtime":1611316488246,"results":"14","hashOfConfig":"15"},{"size":202,"mtime":1611316488230,"results":"16","hashOfConfig":"15"},{"size":2207,"mtime":1611316488230,"results":"17","hashOfConfig":"15"},{"size":372,"mtime":1611316488230,"results":"18","hashOfConfig":"15"},{"size":1132,"mtime":1611316488230,"results":"19","hashOfConfig":"15"},{"size":355,"mtime":1611316488230,"results":"20","hashOfConfig":"15"},{"size":1499,"mtime":1611336232458,"results":"21","hashOfConfig":"15"},{"size":2084,"mtime":1611327641273,"results":"22","hashOfConfig":"15"},{"size":281,"mtime":1611316488230,"results":"23","hashOfConfig":"15"},{"size":255,"mtime":1611316488230,"results":"24","hashOfConfig":"15"},{"size":305,"mtime":1611316488230,"results":"25","hashOfConfig":"15"},{"size":1280,"mtime":1611316488246,"results":"26","hashOfConfig":"15"},{"size":151,"mtime":1611316488230,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"1fe9vm6",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\New folder\\tetris-typescript\\src\\index.tsx",["58"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n",["59","60"],"E:\\New folder\\tetris-typescript\\src\\App.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\Tetris.tsx",["61"],"import React, { useState,KeyboardEvent } from 'react';\r\nimport Stage from './Stage';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\nimport { createStage, checkCollision } from '../gameHelper';\r\n\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage'\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\nconst Tetris = () => {\r\n    const [gameOver, setGameOver] = useState<boolean>(false)\r\n\r\n    const [player, updatePlayerPos, resetPlayer,playerRotate]:Array<any> = usePlayer();\r\n    const [stage, setStage, rowsCleared]:Array<any> = useStage(player, resetPlayer);\r\n    const [score, setScore] = useGameStatus(rowsCleared);\r\n    const movePlayer = (dir:number) => {\r\n        if (!checkCollision(player, stage, dir,0)) {\r\n            updatePlayerPos( dir,0 )\r\n        }\r\n\r\n    }\r\n    const startGame = () => {\r\n        setStage(createStage())\r\n        resetPlayer()\r\n        setGameOver(false)\r\n\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n\r\n        if (!checkCollision(player, stage, 0, 1 )) {\r\n            updatePlayerPos( 0, 1, false )\r\n        }\r\n        else {\r\n            if (player.pos.y < 1) {\r\n                setGameOver(true)\r\n                \r\n            }\r\n            updatePlayerPos(0,0,true )\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n      const move = (e: KeyboardEvent) => {\r\n        if (!gameOver) {\r\n    \r\n          if (e.keyCode === 37)\r\n            movePlayer(-1);\r\n          else if (e.keyCode === 39)\r\n            movePlayer(1);\r\n          else if (e.keyCode === 40)\r\n            dropPlayer();\r\n          else if (e.keyCode === 38) {\r\n            playerRotate(stage);\r\n          }\r\n    \r\n    \r\n        }\r\n      }    \r\n\r\n    return (\r\n      <StyledTetrisWrapper role=\"button\" tabIndex={0} onKeyDown={(e: KeyboardEvent) => move(e)}>\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                &nbsp;&nbsp; <button onClick={startGame}>Start</button>\r\n                <br />\r\n                &nbsp;&nbsp;Score: {score}\r\n                <br />\r\n                &nbsp;&nbsp;{gameOver ? \"GAMEOVER\" : \"\"}\r\n\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n\r\n    )\r\n}\r\nexport default Tetris;","E:\\New folder\\tetris-typescript\\src\\components\\Stage.tsx",[],"E:\\New folder\\tetris-typescript\\src\\gameHelper.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledTetris.tsx",[],"E:\\New folder\\tetris-typescript\\src\\hooks\\usePlayer.tsx",[],"E:\\New folder\\tetris-typescript\\src\\hooks\\useStage.tsx",["62"],"import { useState, useEffect } from 'react'\r\nimport { createStage } from '../gameHelper';\r\ninterface point {\r\nx: number\r\ny: number\r\n}\r\n\r\ninterface IPlayer {\r\npos: point\r\ntetromino: (string | number)[][],\r\ncollided: boolean,\r\n}\r\n\r\ntype Function = () => void;\r\nexport const useStage = (player:IPlayer,resetPlayer:Function)=> {\r\n    const [stage, setStage] = useState<Array<Array<Array<string | number>>>>(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n        const sweepRows = (newStage:Array<Array<Array<string | number>>>) =>\r\n        newStage.reduce((ack:Array<Array<Array<string | number>>>, row) => {\r\n         \r\n          if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n            setRowsCleared(prev => prev + 1);\r\n            ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n            return ack;\r\n          }\r\n          ack.push(row);\r\n          return ack;\r\n        }, [])\r\n\r\n\r\n        const updateStage = (prevStage:Array<Array<Array<string | number>>>) => {\r\n\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell =>(cell[1] === 'clear' ? [0, 'clear'] : cell)));\r\n\r\n                for(var i=0;i<player.tetromino.length;i++)\r\n                {\r\n                    for(var j=0;j<player.tetromino[0].length;j++)\r\n                    {\r\n                        if(player.tetromino[i][j]!==0)\r\n                        {\r\n                            newStage[i+player.pos.y][j+player.pos.x]=[\r\n                                player.tetromino[i][j],\r\n                                `${player.collided?'merged':'clear' }`\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(player.collided)\r\n                {\r\n                    resetPlayer();\r\n                    return sweepRows(newStage);\r\n                }\r\n\r\n                return newStage;\r\n\r\n        }\r\n        setStage(prev => updateStage(prev))\r\n    }, [player])\r\n   \r\n     return [stage, setStage,rowsCleared];\r\n\r\n}","E:\\New folder\\tetris-typescript\\src\\hooks\\useGameStatus.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledStage.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\Cell.tsx",[],"E:\\New folder\\tetris-typescript\\src\\tetrominos.tsx",[],"E:\\New folder\\tetris-typescript\\src\\components\\styles\\StyledCell.tsx",[],{"ruleId":"63","severity":1,"message":"64","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":23},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"63","severity":1,"message":"71","line":15,"column":19,"nodeType":"65","messageId":"66","endLine":15,"endColumn":27},{"ruleId":"72","severity":1,"message":"73","line":63,"column":8,"nodeType":"74","endLine":63,"endColumn":16,"suggestions":"75"},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"'setScore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetPlayer'. Either include it or remove the dependency array. If 'resetPlayer' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [player, resetPlayer]",{"range":"81","text":"82"},[2021,2029],"[player, resetPlayer]"]